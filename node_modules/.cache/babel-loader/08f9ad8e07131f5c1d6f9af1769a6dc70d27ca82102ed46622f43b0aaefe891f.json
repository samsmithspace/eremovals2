{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Runze Xia\\\\Desktop\\\\eremovals2\\\\src\\\\common\\\\context\\\\AppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/common/context/AppContext.js\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  theme: 'light',\n  notifications: [],\n  isLoading: false,\n  error: null\n};\n\n// Action types\nexport const APP_ACTIONS = {\n  SET_THEME: 'SET_THEME',\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\n  REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION',\n  SET_LOADING: 'SET_LOADING',\n  SET_ERROR: 'SET_ERROR',\n  CLEAR_ERROR: 'CLEAR_ERROR'\n};\n\n// Reducer function\nconst appReducer = (state, action) => {\n  switch (action.type) {\n    case APP_ACTIONS.SET_THEME:\n      return {\n        ...state,\n        theme: action.payload\n      };\n    case APP_ACTIONS.ADD_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [...state.notifications, {\n          id: Date.now(),\n          ...action.payload\n        }]\n      };\n    case APP_ACTIONS.REMOVE_NOTIFICATION:\n      return {\n        ...state,\n        notifications: state.notifications.filter(notification => notification.id !== action.payload)\n      };\n    case APP_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case APP_ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    case APP_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AppContext = /*#__PURE__*/createContext();\n\n/**\r\n * App Provider component\r\n * Provides global application state and actions to all children\r\n */\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // Load theme from localStorage on mount\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      dispatch({\n        type: APP_ACTIONS.SET_THEME,\n        payload: savedTheme\n      });\n    }\n  }, []);\n\n  // Save theme to localStorage when it changes\n  useEffect(() => {\n    localStorage.setItem('theme', state.theme);\n  }, [state.theme]);\n\n  // Auto-dismiss notifications after 5 seconds\n  useEffect(() => {\n    const timers = state.notifications.map(notification => {\n      return setTimeout(() => {\n        dispatch({\n          type: APP_ACTIONS.REMOVE_NOTIFICATION,\n          payload: notification.id\n        });\n      }, 5000);\n    });\n    return () => {\n      timers.forEach(timer => clearTimeout(timer));\n    };\n  }, [state.notifications]);\n\n  // Helper functions\n  const setTheme = theme => {\n    dispatch({\n      type: APP_ACTIONS.SET_THEME,\n      payload: theme\n    });\n  };\n  const addNotification = notification => {\n    dispatch({\n      type: APP_ACTIONS.ADD_NOTIFICATION,\n      payload: notification\n    });\n  };\n  const removeNotification = id => {\n    dispatch({\n      type: APP_ACTIONS.REMOVE_NOTIFICATION,\n      payload: id\n    });\n  };\n  const setLoading = isLoading => {\n    dispatch({\n      type: APP_ACTIONS.SET_LOADING,\n      payload: isLoading\n    });\n  };\n  const setError = error => {\n    dispatch({\n      type: APP_ACTIONS.SET_ERROR,\n      payload: error\n    });\n  };\n  const clearError = () => {\n    dispatch({\n      type: APP_ACTIONS.CLEAR_ERROR\n    });\n  };\n  const value = {\n    ...state,\n    setTheme,\n    addNotification,\n    removeNotification,\n    setLoading,\n    setError,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n};\n_s(AppProvider, \"s3jE+e7wLGXN/2uWqdAG2uRSMfA=\");\n_c = AppProvider;\nAppProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\n/**\r\n * Custom hook to use the AppContext\r\n * @returns {Object} App context value\r\n */\nexport const useAppContext = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};\n_s2(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","PropTypes","jsxDEV","_jsxDEV","initialState","theme","notifications","isLoading","error","APP_ACTIONS","SET_THEME","ADD_NOTIFICATION","REMOVE_NOTIFICATION","SET_LOADING","SET_ERROR","CLEAR_ERROR","appReducer","state","action","type","payload","id","Date","now","filter","notification","AppContext","AppProvider","children","_s","dispatch","savedTheme","localStorage","getItem","setItem","timers","map","setTimeout","forEach","timer","clearTimeout","setTheme","addNotification","removeNotification","setLoading","setError","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","isRequired","useAppContext","_s2","context","undefined","Error","$RefreshReg$"],"sources":["C:/Users/Runze Xia/Desktop/eremovals2/src/common/context/AppContext.js"],"sourcesContent":["// src/common/context/AppContext.js\r\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Initial state\r\nconst initialState = {\r\n    theme: 'light',\r\n    notifications: [],\r\n    isLoading: false,\r\n    error: null\r\n};\r\n\r\n// Action types\r\nexport const APP_ACTIONS = {\r\n    SET_THEME: 'SET_THEME',\r\n    ADD_NOTIFICATION: 'ADD_NOTIFICATION',\r\n    REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION',\r\n    SET_LOADING: 'SET_LOADING',\r\n    SET_ERROR: 'SET_ERROR',\r\n    CLEAR_ERROR: 'CLEAR_ERROR'\r\n};\r\n\r\n// Reducer function\r\nconst appReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case APP_ACTIONS.SET_THEME:\r\n            return {\r\n                ...state,\r\n                theme: action.payload\r\n            };\r\n        case APP_ACTIONS.ADD_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                notifications: [...state.notifications, { id: Date.now(), ...action.payload }]\r\n            };\r\n        case APP_ACTIONS.REMOVE_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                notifications: state.notifications.filter(notification => notification.id !== action.payload)\r\n            };\r\n        case APP_ACTIONS.SET_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload\r\n            };\r\n        case APP_ACTIONS.SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            };\r\n        case APP_ACTIONS.CLEAR_ERROR:\r\n            return {\r\n                ...state,\r\n                error: null\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// Create context\r\nconst AppContext = createContext();\r\n\r\n/**\r\n * App Provider component\r\n * Provides global application state and actions to all children\r\n */\r\nexport const AppProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(appReducer, initialState);\r\n\r\n    // Load theme from localStorage on mount\r\n    useEffect(() => {\r\n        const savedTheme = localStorage.getItem('theme');\r\n        if (savedTheme) {\r\n            dispatch({ type: APP_ACTIONS.SET_THEME, payload: savedTheme });\r\n        }\r\n    }, []);\r\n\r\n    // Save theme to localStorage when it changes\r\n    useEffect(() => {\r\n        localStorage.setItem('theme', state.theme);\r\n    }, [state.theme]);\r\n\r\n    // Auto-dismiss notifications after 5 seconds\r\n    useEffect(() => {\r\n        const timers = state.notifications.map(notification => {\r\n            return setTimeout(() => {\r\n                dispatch({ type: APP_ACTIONS.REMOVE_NOTIFICATION, payload: notification.id });\r\n            }, 5000);\r\n        });\r\n\r\n        return () => {\r\n            timers.forEach(timer => clearTimeout(timer));\r\n        };\r\n    }, [state.notifications]);\r\n\r\n    // Helper functions\r\n    const setTheme = (theme) => {\r\n        dispatch({ type: APP_ACTIONS.SET_THEME, payload: theme });\r\n    };\r\n\r\n    const addNotification = (notification) => {\r\n        dispatch({ type: APP_ACTIONS.ADD_NOTIFICATION, payload: notification });\r\n    };\r\n\r\n    const removeNotification = (id) => {\r\n        dispatch({ type: APP_ACTIONS.REMOVE_NOTIFICATION, payload: id });\r\n    };\r\n\r\n    const setLoading = (isLoading) => {\r\n        dispatch({ type: APP_ACTIONS.SET_LOADING, payload: isLoading });\r\n    };\r\n\r\n    const setError = (error) => {\r\n        dispatch({ type: APP_ACTIONS.SET_ERROR, payload: error });\r\n    };\r\n\r\n    const clearError = () => {\r\n        dispatch({ type: APP_ACTIONS.CLEAR_ERROR });\r\n    };\r\n\r\n    const value = {\r\n        ...state,\r\n        setTheme,\r\n        addNotification,\r\n        removeNotification,\r\n        setLoading,\r\n        setError,\r\n        clearError\r\n    };\r\n\r\n    return (\r\n        <AppContext.Provider value={value}>\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nAppProvider.propTypes = {\r\n    children: PropTypes.node.isRequired\r\n};\r\n\r\n/**\r\n * Custom hook to use the AppContext\r\n * @returns {Object} App context value\r\n */\r\nexport const useAppContext = () => {\r\n    const context = useContext(AppContext);\r\n    if (context === undefined) {\r\n        throw new Error('useAppContext must be used within an AppProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport default AppContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}