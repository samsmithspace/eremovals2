{"ast":null,"code":"var _s = $RefreshSig$();\n// src/features/booking/hooks/useBookingForm.js\nimport { useState, useCallback, useEffect } from 'react';\nimport { bookingService } from '../services/bookingService';\nimport { useBookingContext } from '../context/BookingContext';\n\n/**\r\n * Custom hook for managing booking form state and validation\r\n * @param {string} bookingId - ID of the booking\r\n * @param {Function} onSubmitSuccess - Callback when form submission succeeds\r\n * @returns {Object} Form state and handlers\r\n */\nexport const useBookingForm = (bookingId, onSubmitSuccess) => {\n  _s();\n  const {\n    setContactInfo,\n    setError,\n    clearError\n  } = useBookingContext();\n  const [formValues, setFormValues] = useState({\n    name: '',\n    phone: '',\n    email: ''\n  });\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [touched, setTouched] = useState({});\n\n  // Validation rules\n  const validateField = useCallback((name, value) => {\n    switch (name) {\n      case 'name':\n        if (!value.trim()) return 'Name is required';\n        if (value.trim().length < 2) return 'Name must be at least 2 characters';\n        return null;\n      case 'phone':\n        if (!value.trim()) return 'Phone number is required';\n        const phoneRegex = /^[\\+]?[1-9][\\d]{0,15}$/;\n        if (!phoneRegex.test(value.replace(/\\s/g, ''))) return 'Please enter a valid phone number';\n        return null;\n      case 'email':\n        if (!value.trim()) return 'Email is required';\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(value)) return 'Please enter a valid email address';\n        return null;\n      default:\n        return null;\n    }\n  }, []);\n\n  // Validate all fields\n  const validateForm = useCallback(() => {\n    const newErrors = {};\n    Object.keys(formValues).forEach(field => {\n      const error = validateField(field, formValues[field]);\n      if (error) newErrors[field] = error;\n    });\n    return newErrors;\n  }, [formValues, validateField]);\n\n  // Handle input change\n  const handleChange = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormValues(prev => ({\n      ...prev,\n      [name]: value\n    }));\n\n    // Clear error for this field\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: null\n      }));\n    }\n\n    // Validate field if it has been touched\n    if (touched[name]) {\n      const error = validateField(name, value);\n      setErrors(prev => ({\n        ...prev,\n        [name]: error\n      }));\n    }\n    clearError();\n  }, [errors, touched, validateField, clearError]);\n\n  // Handle field blur\n  const handleBlur = useCallback(e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setTouched(prev => ({\n      ...prev,\n      [name]: true\n    }));\n    const error = validateField(name, value);\n    setErrors(prev => ({\n      ...prev,\n      [name]: error\n    }));\n  }, [validateField]);\n\n  // Handle form submission\n  const handleSubmit = useCallback(async e => {\n    e.preventDefault();\n    const formErrors = validateForm();\n    setErrors(formErrors);\n    if (Object.keys(formErrors).length > 0) {\n      setTouched({\n        name: true,\n        phone: true,\n        email: true\n      });\n      return;\n    }\n    setIsSubmitting(true);\n    clearError();\n    try {\n      await bookingService.updateContactInfo(bookingId, formValues);\n      setContactInfo(formValues);\n      if (onSubmitSuccess) {\n        onSubmitSuccess(formValues);\n      }\n    } catch (error) {\n      console.error('Error updating contact information:', error);\n      setError(error.message || 'Failed to update contact information');\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [bookingId, formValues, validateForm, setContactInfo, onSubmitSuccess, clearError, setError]);\n\n  // Check if form is valid\n  const isValid = Object.keys(validateForm()).length === 0 && formValues.name.trim() && formValues.phone.trim() && formValues.email.trim();\n  return {\n    formValues,\n    errors,\n    isSubmitting,\n    isValid,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    setFormValues\n  };\n};\n_s(useBookingForm, \"X5s8276urZ7xS3Bm3NjlBhyr+qE=\", false, function () {\n  return [useBookingContext];\n});","map":{"version":3,"names":["useState","useCallback","useEffect","bookingService","useBookingContext","useBookingForm","bookingId","onSubmitSuccess","_s","setContactInfo","setError","clearError","formValues","setFormValues","name","phone","email","errors","setErrors","isSubmitting","setIsSubmitting","touched","setTouched","validateField","value","trim","length","phoneRegex","test","replace","emailRegex","validateForm","newErrors","Object","keys","forEach","field","error","handleChange","e","target","prev","handleBlur","handleSubmit","preventDefault","formErrors","updateContactInfo","console","message","isValid"],"sources":["C:/Users/Runze Xia/Desktop/eremovals2/src/features/booking/hooks/useBookingForm.js"],"sourcesContent":["// src/features/booking/hooks/useBookingForm.js\r\nimport { useState, useCallback, useEffect } from 'react';\r\nimport { bookingService } from '../services/bookingService';\r\nimport { useBookingContext } from '../context/BookingContext';\r\n\r\n/**\r\n * Custom hook for managing booking form state and validation\r\n * @param {string} bookingId - ID of the booking\r\n * @param {Function} onSubmitSuccess - Callback when form submission succeeds\r\n * @returns {Object} Form state and handlers\r\n */\r\nexport const useBookingForm = (bookingId, onSubmitSuccess) => {\r\n    const { setContactInfo, setError, clearError } = useBookingContext();\r\n\r\n    const [formValues, setFormValues] = useState({\r\n        name: '',\r\n        phone: '',\r\n        email: ''\r\n    });\r\n\r\n    const [errors, setErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const [touched, setTouched] = useState({});\r\n\r\n    // Validation rules\r\n    const validateField = useCallback((name, value) => {\r\n        switch (name) {\r\n            case 'name':\r\n                if (!value.trim()) return 'Name is required';\r\n                if (value.trim().length < 2) return 'Name must be at least 2 characters';\r\n                return null;\r\n\r\n            case 'phone':\r\n                if (!value.trim()) return 'Phone number is required';\r\n                const phoneRegex = /^[\\+]?[1-9][\\d]{0,15}$/;\r\n                if (!phoneRegex.test(value.replace(/\\s/g, ''))) return 'Please enter a valid phone number';\r\n                return null;\r\n\r\n            case 'email':\r\n                if (!value.trim()) return 'Email is required';\r\n                const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n                if (!emailRegex.test(value)) return 'Please enter a valid email address';\r\n                return null;\r\n\r\n            default:\r\n                return null;\r\n        }\r\n    }, []);\r\n\r\n    // Validate all fields\r\n    const validateForm = useCallback(() => {\r\n        const newErrors = {};\r\n        Object.keys(formValues).forEach(field => {\r\n            const error = validateField(field, formValues[field]);\r\n            if (error) newErrors[field] = error;\r\n        });\r\n        return newErrors;\r\n    }, [formValues, validateField]);\r\n\r\n    // Handle input change\r\n    const handleChange = useCallback((e) => {\r\n        const { name, value } = e.target;\r\n\r\n        setFormValues(prev => ({\r\n            ...prev,\r\n            [name]: value\r\n        }));\r\n\r\n        // Clear error for this field\r\n        if (errors[name]) {\r\n            setErrors(prev => ({\r\n                ...prev,\r\n                [name]: null\r\n            }));\r\n        }\r\n\r\n        // Validate field if it has been touched\r\n        if (touched[name]) {\r\n            const error = validateField(name, value);\r\n            setErrors(prev => ({\r\n                ...prev,\r\n                [name]: error\r\n            }));\r\n        }\r\n\r\n        clearError();\r\n    }, [errors, touched, validateField, clearError]);\r\n\r\n    // Handle field blur\r\n    const handleBlur = useCallback((e) => {\r\n        const { name, value } = e.target;\r\n\r\n        setTouched(prev => ({\r\n            ...prev,\r\n            [name]: true\r\n        }));\r\n\r\n        const error = validateField(name, value);\r\n        setErrors(prev => ({\r\n            ...prev,\r\n            [name]: error\r\n        }));\r\n    }, [validateField]);\r\n\r\n    // Handle form submission\r\n    const handleSubmit = useCallback(async (e) => {\r\n        e.preventDefault();\r\n\r\n        const formErrors = validateForm();\r\n        setErrors(formErrors);\r\n\r\n        if (Object.keys(formErrors).length > 0) {\r\n            setTouched({\r\n                name: true,\r\n                phone: true,\r\n                email: true\r\n            });\r\n            return;\r\n        }\r\n\r\n        setIsSubmitting(true);\r\n        clearError();\r\n\r\n        try {\r\n            await bookingService.updateContactInfo(bookingId, formValues);\r\n            setContactInfo(formValues);\r\n\r\n            if (onSubmitSuccess) {\r\n                onSubmitSuccess(formValues);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating contact information:', error);\r\n            setError(error.message || 'Failed to update contact information');\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    }, [bookingId, formValues, validateForm, setContactInfo, onSubmitSuccess, clearError, setError]);\r\n\r\n    // Check if form is valid\r\n    const isValid = Object.keys(validateForm()).length === 0 &&\r\n        formValues.name.trim() &&\r\n        formValues.phone.trim() &&\r\n        formValues.email.trim();\r\n\r\n    return {\r\n        formValues,\r\n        errors,\r\n        isSubmitting,\r\n        isValid,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        setFormValues\r\n    };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}