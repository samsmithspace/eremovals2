{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Runze Xia\\\\Desktop\\\\eremovals2\\\\src\\\\features\\\\locations\\\\components\\\\GoogleMapComponent.js\",\n  _s = $RefreshSig$();\n// src/features/locations/components/GoogleMapComponent.js\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { GoogleMap, useJsApiLoader, Autocomplete } from '@react-google-maps/api';\nimport { useTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\nimport { useLocationSearch } from '../hooks/useLocationSearch';\nimport { useAddressLookup } from '../hooks/useAddressLookup';\nimport config from '../../../config/config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst libraries = ['places', 'marker'];\n\n/**\r\n * Google Maps component with address autocomplete and selection\r\n * @param {Object} props\r\n * @param {Function} props.onPlaceSelected - Callback when a place is selected\r\n * @param {Object} props.defaultLocation - Default map center\r\n * @param {number} props.zoom - Map zoom level\r\n */\nconst GoogleMapComponent = ({\n  onPlaceSelected,\n  defaultLocation = config.map.defaultCenter,\n  zoom = config.map.defaultZoom\n}) => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const [autocomplete, setAutocomplete] = useState(null);\n  const [center, setCenter] = useState(defaultLocation);\n  const [markerPosition, setMarkerPosition] = useState(null);\n  const [postcode, setPostcode] = useState('');\n\n  // Custom hooks for location functionality\n  const {\n    isLoaded,\n    loadError\n  } = useLocationSearch();\n  const {\n    addresses,\n    isLoading: addressesLoading\n  } = useAddressLookup(postcode);\n\n  // Load Google Maps script\n  const {\n    isLoaded: mapsLoaded,\n    loadError: mapsLoadError\n  } = useJsApiLoader({\n    googleMapsApiKey: config.apiKeys.googleMaps,\n    libraries\n  });\n  const onLoad = useCallback(autocompleteInstance => {\n    setAutocomplete(autocompleteInstance);\n  }, []);\n  const onPlaceChanged = useCallback(() => {\n    if (autocomplete !== null) {\n      const place = autocomplete.getPlace();\n      if (!place.geometry) {\n        console.warn('No geometry data available for the selected place');\n        return;\n      }\n      const location = {\n        lat: place.geometry.location.lat(),\n        lng: place.geometry.location.lng()\n      };\n      setCenter(location);\n      setMarkerPosition(location);\n\n      // Extract postcode for address lookup\n      const addressComponents = place.address_components;\n      const postalCodeComponent = addressComponents === null || addressComponents === void 0 ? void 0 : addressComponents.find(component => component.types.includes(\"postal_code\"));\n      if (postalCodeComponent) {\n        setPostcode(postalCodeComponent.long_name);\n      }\n\n      // Handle different modes (development vs production)\n      if (config.isDevelopment) {\n        onPlaceSelected(place);\n      } else {\n        // In production, wait for detailed address selection\n        onPlaceSelected(place.formatted_address || place.name);\n      }\n    }\n  }, [autocomplete, onPlaceSelected]);\n  const handleAddressChange = useCallback(event => {\n    const selectedAddress = event.target.value;\n    if (selectedAddress && onPlaceSelected) {\n      onPlaceSelected(selectedAddress);\n    }\n  }, [onPlaceSelected]);\n\n  // Handle loading and error states\n  if (loadError || mapsLoadError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-error\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: t('mapLoadError', 'Error loading Google Maps')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this);\n  }\n  if (!isLoaded || !mapsLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-loading\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: t('loadingMap', 'Loading map...')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"google-map-component\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-input-container\",\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        onLoad: onLoad,\n        onPlaceChanged: onPlaceChanged,\n        className: \"map-autocomplete\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: t('enterLocation', 'Enter Location'),\n          className: \"map-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), !config.isDevelopment && postcode && addresses.length > 0 && /*#__PURE__*/_jsxDEV(AddressDropdown, {\n      addresses: addresses,\n      onAddressChange: handleAddressChange,\n      isLoading: addressesLoading,\n      placeholder: t('selectDetailedAddress', 'Click here to select detailed address...')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }, this), markerPosition && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: {\n          height: \"100%\",\n          width: \"100%\"\n        },\n        center: center,\n        zoom: zoom,\n        options: {\n          mapId: config.map.mapId\n        },\n        onLoad: map => {\n          // Add advanced marker if available\n          const {\n            AdvancedMarkerElement\n          } = window.google.maps.marker || {};\n          if (AdvancedMarkerElement) {\n            new AdvancedMarkerElement({\n              map,\n              position: markerPosition\n            });\n          } else {\n            console.warn(\"AdvancedMarkerElement not available\");\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n\n/**\r\n * Dropdown component for detailed address selection\r\n */\n_s(GoogleMapComponent, \"rxzRQPQpnrMPJQ5zXgQSaEciO4U=\", false, function () {\n  return [useTranslation, useLocationSearch, useAddressLookup, useJsApiLoader];\n});\n_c = GoogleMapComponent;\nconst AddressDropdown = ({\n  addresses,\n  onAddressChange,\n  isLoading,\n  placeholder\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"address-dropdown\",\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"address-select\",\n      onChange: onAddressChange,\n      disabled: isLoading,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: isLoading ? 'Loading addresses...' : placeholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), addresses.map((address, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: address,\n        children: address.replace(/,/g, ', ')\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 9\n  }, this);\n};\n_c2 = AddressDropdown;\nAddressDropdown.propTypes = {\n  addresses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onAddressChange: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool,\n  placeholder: PropTypes.string\n};\nGoogleMapComponent.propTypes = {\n  onPlaceSelected: PropTypes.func.isRequired,\n  defaultLocation: PropTypes.shape({\n    lat: PropTypes.number.isRequired,\n    lng: PropTypes.number.isRequired\n  }),\n  zoom: PropTypes.number\n};\nexport default GoogleMapComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"GoogleMapComponent\");\n$RefreshReg$(_c2, \"AddressDropdown\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","GoogleMap","useJsApiLoader","Autocomplete","useTranslation","PropTypes","useLocationSearch","useAddressLookup","config","jsxDEV","_jsxDEV","libraries","GoogleMapComponent","onPlaceSelected","defaultLocation","map","defaultCenter","zoom","defaultZoom","_s","t","autocomplete","setAutocomplete","center","setCenter","markerPosition","setMarkerPosition","postcode","setPostcode","isLoaded","loadError","addresses","isLoading","addressesLoading","mapsLoaded","mapsLoadError","googleMapsApiKey","apiKeys","googleMaps","onLoad","autocompleteInstance","onPlaceChanged","place","getPlace","geometry","console","warn","location","lat","lng","addressComponents","address_components","postalCodeComponent","find","component","types","includes","long_name","isDevelopment","formatted_address","name","handleAddressChange","event","selectedAddress","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","length","AddressDropdown","onAddressChange","mapContainerStyle","height","width","options","mapId","AdvancedMarkerElement","window","google","maps","marker","position","_c","onChange","disabled","address","index","replace","_c2","propTypes","arrayOf","string","isRequired","func","bool","shape","number","$RefreshReg$"],"sources":["C:/Users/Runze Xia/Desktop/eremovals2/src/features/locations/components/GoogleMapComponent.js"],"sourcesContent":["// src/features/locations/components/GoogleMapComponent.js\r\nimport React, { useState, useCallback, useEffect } from 'react';\r\nimport { GoogleMap, useJsApiLoader, Autocomplete } from '@react-google-maps/api';\r\nimport { useTranslation } from 'react-i18next';\r\nimport PropTypes from 'prop-types';\r\nimport { useLocationSearch } from '../hooks/useLocationSearch';\r\nimport { useAddressLookup } from '../hooks/useAddressLookup';\r\nimport config from '../../../config/config';\r\n\r\nconst libraries = ['places', 'marker'];\r\n\r\n/**\r\n * Google Maps component with address autocomplete and selection\r\n * @param {Object} props\r\n * @param {Function} props.onPlaceSelected - Callback when a place is selected\r\n * @param {Object} props.defaultLocation - Default map center\r\n * @param {number} props.zoom - Map zoom level\r\n */\r\nconst GoogleMapComponent = ({\r\n                                onPlaceSelected,\r\n                                defaultLocation = config.map.defaultCenter,\r\n                                zoom = config.map.defaultZoom\r\n                            }) => {\r\n    const { t } = useTranslation();\r\n    const [autocomplete, setAutocomplete] = useState(null);\r\n    const [center, setCenter] = useState(defaultLocation);\r\n    const [markerPosition, setMarkerPosition] = useState(null);\r\n    const [postcode, setPostcode] = useState('');\r\n\r\n    // Custom hooks for location functionality\r\n    const { isLoaded, loadError } = useLocationSearch();\r\n    const { addresses, isLoading: addressesLoading } = useAddressLookup(postcode);\r\n\r\n    // Load Google Maps script\r\n    const { isLoaded: mapsLoaded, loadError: mapsLoadError } = useJsApiLoader({\r\n        googleMapsApiKey: config.apiKeys.googleMaps,\r\n        libraries,\r\n    });\r\n\r\n    const onLoad = useCallback((autocompleteInstance) => {\r\n        setAutocomplete(autocompleteInstance);\r\n    }, []);\r\n\r\n    const onPlaceChanged = useCallback(() => {\r\n        if (autocomplete !== null) {\r\n            const place = autocomplete.getPlace();\r\n\r\n            if (!place.geometry) {\r\n                console.warn('No geometry data available for the selected place');\r\n                return;\r\n            }\r\n\r\n            const location = {\r\n                lat: place.geometry.location.lat(),\r\n                lng: place.geometry.location.lng()\r\n            };\r\n\r\n            setCenter(location);\r\n            setMarkerPosition(location);\r\n\r\n            // Extract postcode for address lookup\r\n            const addressComponents = place.address_components;\r\n            const postalCodeComponent = addressComponents?.find(\r\n                component => component.types.includes(\"postal_code\")\r\n            );\r\n\r\n            if (postalCodeComponent) {\r\n                setPostcode(postalCodeComponent.long_name);\r\n            }\r\n\r\n            // Handle different modes (development vs production)\r\n            if (config.isDevelopment) {\r\n                onPlaceSelected(place);\r\n            } else {\r\n                // In production, wait for detailed address selection\r\n                onPlaceSelected(place.formatted_address || place.name);\r\n            }\r\n        }\r\n    }, [autocomplete, onPlaceSelected]);\r\n\r\n    const handleAddressChange = useCallback((event) => {\r\n        const selectedAddress = event.target.value;\r\n        if (selectedAddress && onPlaceSelected) {\r\n            onPlaceSelected(selectedAddress);\r\n        }\r\n    }, [onPlaceSelected]);\r\n\r\n    // Handle loading and error states\r\n    if (loadError || mapsLoadError) {\r\n        return (\r\n            <div className=\"map-error\">\r\n                <p>{t('mapLoadError', 'Error loading Google Maps')}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!isLoaded || !mapsLoaded) {\r\n        return (\r\n            <div className=\"map-loading\">\r\n                <p>{t('loadingMap', 'Loading map...')}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"google-map-component\">\r\n            {/* Address Input with Autocomplete */}\r\n            <div className=\"map-input-container\">\r\n                <Autocomplete\r\n                    onLoad={onLoad}\r\n                    onPlaceChanged={onPlaceChanged}\r\n                    className=\"map-autocomplete\"\r\n                >\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder={t('enterLocation', 'Enter Location')}\r\n                        className=\"map-input\"\r\n                    />\r\n                </Autocomplete>\r\n            </div>\r\n\r\n            {/* Detailed Address Selection (Production mode) */}\r\n            {!config.isDevelopment && postcode && addresses.length > 0 && (\r\n                <AddressDropdown\r\n                    addresses={addresses}\r\n                    onAddressChange={handleAddressChange}\r\n                    isLoading={addressesLoading}\r\n                    placeholder={t('selectDetailedAddress', 'Click here to select detailed address...')}\r\n                />\r\n            )}\r\n\r\n            {/* Map Display */}\r\n            {markerPosition && (\r\n                <div className=\"map-container\">\r\n                    <GoogleMap\r\n                        mapContainerStyle={{ height: \"100%\", width: \"100%\" }}\r\n                        center={center}\r\n                        zoom={zoom}\r\n                        options={{ mapId: config.map.mapId }}\r\n                        onLoad={(map) => {\r\n                            // Add advanced marker if available\r\n                            const { AdvancedMarkerElement } = window.google.maps.marker || {};\r\n                            if (AdvancedMarkerElement) {\r\n                                new AdvancedMarkerElement({\r\n                                    map,\r\n                                    position: markerPosition\r\n                                });\r\n                            } else {\r\n                                console.warn(\"AdvancedMarkerElement not available\");\r\n                            }\r\n                        }}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n/**\r\n * Dropdown component for detailed address selection\r\n */\r\nconst AddressDropdown = ({\r\n                             addresses,\r\n                             onAddressChange,\r\n                             isLoading,\r\n                             placeholder\r\n                         }) => {\r\n    return (\r\n        <div className=\"address-dropdown\">\r\n            <select\r\n                className=\"address-select\"\r\n                onChange={onAddressChange}\r\n                disabled={isLoading}\r\n            >\r\n                <option value=\"\">\r\n                    {isLoading ? 'Loading addresses...' : placeholder}\r\n                </option>\r\n                {addresses.map((address, index) => (\r\n                    <option key={index} value={address}>\r\n                        {address.replace(/,/g, ', ')}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\nAddressDropdown.propTypes = {\r\n    addresses: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    onAddressChange: PropTypes.func.isRequired,\r\n    isLoading: PropTypes.bool,\r\n    placeholder: PropTypes.string\r\n};\r\n\r\nGoogleMapComponent.propTypes = {\r\n    onPlaceSelected: PropTypes.func.isRequired,\r\n    defaultLocation: PropTypes.shape({\r\n        lat: PropTypes.number.isRequired,\r\n        lng: PropTypes.number.isRequired\r\n    }),\r\n    zoom: PropTypes.number\r\n};\r\n\r\nexport default GoogleMapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}