{"ast":null,"code":"var _s = $RefreshSig$();\n// src/common/hooks/useLocalStorage.js\nimport { useState, useEffect } from 'react';\n\n/**\r\n * Custom hook for managing state in localStorage\r\n *\r\n * @param {string} key - localStorage key\r\n * @param {any} initialValue - Initial value if key doesn't exist\r\n * @returns {Array} [storedValue, setValue]\r\n */\nexport const useLocalStorage = (key, initialValue) => {\n  _s();\n  // Get from localStorage or use initialValue\n  const readValue = () => {\n    if (typeof window === 'undefined') {\n      return initialValue;\n    }\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  };\n  const [storedValue, setStoredValue] = useState(readValue);\n\n  // Return a wrapped version of useState's setter function that\n  // persists the new value to localStorage\n  const setValue = value => {\n    if (typeof window === 'undefined') {\n      console.warn(`Can't set localStorage key \"${key}\" when window is undefined`);\n      return;\n    }\n    try {\n      // Allow value to be a function so we have the same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n\n      // Save state\n      setStoredValue(valueToStore);\n\n      // Save to localStorage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n\n      // Dispatch an event so other hooks listening to the same key can update\n      window.dispatchEvent(new Event('local-storage'));\n    } catch (error) {\n      console.warn(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  // Listen for changes to this localStorage key in other tabs/windows\n  useEffect(() => {\n    const handleStorageChange = () => {\n      setStoredValue(readValue());\n    };\n\n    // This custom event is fired by setValue\n    window.addEventListener('local-storage', handleStorageChange);\n    // This is a standard event fired when localStorage changes in other documents\n    window.addEventListener('storage', handleStorageChange);\n    return () => {\n      window.removeEventListener('local-storage', handleStorageChange);\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n  return [storedValue, setValue];\n};\n_s(useLocalStorage, \"Ks0YTqr1zEI6XzxfG55cySFLWkY=\");\nexport default useLocalStorage;","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","_s","readValue","window","item","localStorage","getItem","JSON","parse","error","console","warn","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify","dispatchEvent","Event","handleStorageChange","addEventListener","removeEventListener"],"sources":["C:/Users/Runze Xia/Desktop/eremovals2/src/common/hooks/useLocalStorage.js"],"sourcesContent":["// src/common/hooks/useLocalStorage.js\r\nimport { useState, useEffect } from 'react';\r\n\r\n/**\r\n * Custom hook for managing state in localStorage\r\n *\r\n * @param {string} key - localStorage key\r\n * @param {any} initialValue - Initial value if key doesn't exist\r\n * @returns {Array} [storedValue, setValue]\r\n */\r\nexport const useLocalStorage = (key, initialValue) => {\r\n    // Get from localStorage or use initialValue\r\n    const readValue = () => {\r\n        if (typeof window === 'undefined') {\r\n            return initialValue;\r\n        }\r\n\r\n        try {\r\n            const item = window.localStorage.getItem(key);\r\n            return item ? JSON.parse(item) : initialValue;\r\n        } catch (error) {\r\n            console.warn(`Error reading localStorage key \"${key}\":`, error);\r\n            return initialValue;\r\n        }\r\n    };\r\n\r\n    const [storedValue, setStoredValue] = useState(readValue);\r\n\r\n    // Return a wrapped version of useState's setter function that\r\n    // persists the new value to localStorage\r\n    const setValue = (value) => {\r\n        if (typeof window === 'undefined') {\r\n            console.warn(`Can't set localStorage key \"${key}\" when window is undefined`);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Allow value to be a function so we have the same API as useState\r\n            const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n\r\n            // Save state\r\n            setStoredValue(valueToStore);\r\n\r\n            // Save to localStorage\r\n            window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n\r\n            // Dispatch an event so other hooks listening to the same key can update\r\n            window.dispatchEvent(new Event('local-storage'));\r\n        } catch (error) {\r\n            console.warn(`Error setting localStorage key \"${key}\":`, error);\r\n        }\r\n    };\r\n\r\n    // Listen for changes to this localStorage key in other tabs/windows\r\n    useEffect(() => {\r\n        const handleStorageChange = () => {\r\n            setStoredValue(readValue());\r\n        };\r\n\r\n        // This custom event is fired by setValue\r\n        window.addEventListener('local-storage', handleStorageChange);\r\n        // This is a standard event fired when localStorage changes in other documents\r\n        window.addEventListener('storage', handleStorageChange);\r\n\r\n        return () => {\r\n            window.removeEventListener('local-storage', handleStorageChange);\r\n            window.removeEventListener('storage', handleStorageChange);\r\n        };\r\n    }, []);\r\n\r\n    return [storedValue, setValue];\r\n};\r\n\r\nexport default useLocalStorage;"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAGA,CAACC,GAAG,EAAEC,YAAY,KAAK;EAAAC,EAAA;EAClD;EACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACpB,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;MAC/B,OAAOH,YAAY;IACvB;IAEA,IAAI;MACA,MAAMI,IAAI,GAAGD,MAAM,CAACE,YAAY,CAACC,OAAO,CAACP,GAAG,CAAC;MAC7C,OAAOK,IAAI,GAAGG,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC,GAAGJ,YAAY;IACjD,CAAC,CAAC,OAAOS,KAAK,EAAE;MACZC,OAAO,CAACC,IAAI,CAAC,mCAAmCZ,GAAG,IAAI,EAAEU,KAAK,CAAC;MAC/D,OAAOT,YAAY;IACvB;EACJ,CAAC;EAED,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAACM,SAAS,CAAC;;EAEzD;EACA;EACA,MAAMY,QAAQ,GAAIC,KAAK,IAAK;IACxB,IAAI,OAAOZ,MAAM,KAAK,WAAW,EAAE;MAC/BO,OAAO,CAACC,IAAI,CAAC,+BAA+BZ,GAAG,4BAA4B,CAAC;MAC5E;IACJ;IAEA,IAAI;MACA;MACA,MAAMiB,YAAY,GAAGD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACH,WAAW,CAAC,GAAGG,KAAK;;MAE3E;MACAF,cAAc,CAACG,YAAY,CAAC;;MAE5B;MACAb,MAAM,CAACE,YAAY,CAACa,OAAO,CAACnB,GAAG,EAAEQ,IAAI,CAACY,SAAS,CAACH,YAAY,CAAC,CAAC;;MAE9D;MACAb,MAAM,CAACiB,aAAa,CAAC,IAAIC,KAAK,CAAC,eAAe,CAAC,CAAC;IACpD,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACZC,OAAO,CAACC,IAAI,CAAC,mCAAmCZ,GAAG,IAAI,EAAEU,KAAK,CAAC;IACnE;EACJ,CAAC;;EAED;EACAZ,SAAS,CAAC,MAAM;IACZ,MAAMyB,mBAAmB,GAAGA,CAAA,KAAM;MAC9BT,cAAc,CAACX,SAAS,CAAC,CAAC,CAAC;IAC/B,CAAC;;IAED;IACAC,MAAM,CAACoB,gBAAgB,CAAC,eAAe,EAAED,mBAAmB,CAAC;IAC7D;IACAnB,MAAM,CAACoB,gBAAgB,CAAC,SAAS,EAAED,mBAAmB,CAAC;IAEvD,OAAO,MAAM;MACTnB,MAAM,CAACqB,mBAAmB,CAAC,eAAe,EAAEF,mBAAmB,CAAC;MAChEnB,MAAM,CAACqB,mBAAmB,CAAC,SAAS,EAAEF,mBAAmB,CAAC;IAC9D,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACV,WAAW,EAAEE,QAAQ,CAAC;AAClC,CAAC;AAACb,EAAA,CA7DWH,eAAe;AA+D5B,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}