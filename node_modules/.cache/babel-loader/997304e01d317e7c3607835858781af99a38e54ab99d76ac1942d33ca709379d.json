{"ast":null,"code":"// src/features/booking/services/bookingService.js\nimport { fetchApi } from '../../../common/utils/apiUtils';\nimport config from '../../../config/config';\nconst API_BASE_URL = config.api.baseUrl;\nconst ENDPOINTS = config.api.endpoints;\n\n/**\r\n * Service for booking-related API operations\r\n */\nexport const bookingService = {\n  /**\r\n   * Create a new booking\r\n   * @param {Object} bookingData - Booking information\r\n   * @returns {Promise<Object>} Created booking data\r\n   */\n  createBooking: async bookingData => {\n    try {\n      const response = await fetchApi(`${API_BASE_URL}${ENDPOINTS.bookings}`, {\n        method: 'POST',\n        body: JSON.stringify(bookingData)\n      });\n      return response;\n    } catch (error) {\n      console.error('Error creating booking:', error);\n      throw new Error(error.message || 'Failed to create booking');\n    }\n  },\n  /**\r\n   * Get booking details by ID\r\n   * @param {string} bookingId - ID of the booking\r\n   * @returns {Promise<Object>} Booking details\r\n   */\n  getBookingById: async bookingId => {\n    try {\n      const response = await fetchApi(`${API_BASE_URL}${ENDPOINTS.bookings}/${bookingId}`);\n      return response;\n    } catch (error) {\n      console.error('Error fetching booking:', error);\n      throw new Error(error.message || 'Failed to fetch booking details');\n    }\n  },\n  /**\r\n   * Update contact information for a booking\r\n   * @param {string} bookingId - ID of the booking\r\n   * @param {Object} contactInfo - Contact information\r\n   * @returns {Promise<Object>} Updated booking data\r\n   */\n  updateContactInfo: async (bookingId, contactInfo) => {\n    try {\n      const response = await fetchApi(`${API_BASE_URL}${ENDPOINTS.bookings}/${bookingId}/contact`, {\n        method: 'POST',\n        body: JSON.stringify(contactInfo)\n      });\n      return response;\n    } catch (error) {\n      console.error('Error updating contact info:', error);\n      throw new Error(error.message || 'Failed to update contact information');\n    }\n  },\n  /**\r\n   * Create Stripe checkout session\r\n   * @param {string} bookingId - ID of the booking\r\n   * @param {number} amount - Payment amount\r\n   * @param {string} lang - Language for checkout page\r\n   * @returns {Promise<Object>} Checkout session data\r\n   */\n  createCheckoutSession: async (bookingId, amount, lang = 'en') => {\n    try {\n      const response = await fetchApi(`${API_BASE_URL}${ENDPOINTS.bookings}/${bookingId}/create-checkout-session`, {\n        method: 'POST',\n        body: JSON.stringify({\n          bookingId,\n          amount,\n          lang\n        })\n      });\n      return response;\n    } catch (error) {\n      console.error('Error creating checkout session:', error);\n      throw new Error(error.message || 'Failed to create payment session');\n    }\n  },\n  /**\r\n   * Create Stripe checkout session with helper\r\n   * @param {string} bookingId - ID of the booking\r\n   * @param {number} amount - Payment amount including helper\r\n   * @param {string} lang - Language for checkout page\r\n   * @returns {Promise<Object>} Checkout session data\r\n   */\n  createCheckoutSessionWithHelper: async (bookingId, amount, lang = 'en') => {\n    try {\n      const response = await fetchApi(`${API_BASE_URL}${ENDPOINTS.bookings}/${bookingId}/create-checkout-session-helper`, {\n        method: 'POST',\n        body: JSON.stringify({\n          bookingId,\n          amount,\n          lang\n        })\n      });\n      return response;\n    } catch (error) {\n      console.error('Error creating helper checkout session:', error);\n      throw new Error(error.message || 'Failed to create payment session with helper');\n    }\n  },\n  /**\r\n   * Send booking confirmation notification\r\n   * @param {string} bookingId - ID of the booking\r\n   * @returns {Promise<Object>} Response data\r\n   */\n  sendBookingConfirmation: async bookingId => {\n    try {\n      const response = await fetchApi(`${API_BASE_URL}${ENDPOINTS.bookings}/${bookingId}/send`, {\n        method: 'POST',\n        body: JSON.stringify({\n          bookingId\n        })\n      });\n      return response;\n    } catch (error) {\n      console.error('Error sending booking confirmation:', error);\n      throw new Error(error.message || 'Failed to send booking confirmation');\n    }\n  },\n  /**\r\n   * Cancel a booking\r\n   * @param {string} bookingId - ID of the booking\r\n   * @param {string} reason - Cancellation reason\r\n   * @returns {Promise<Object>} Response data\r\n   */\n  cancelBooking: async (bookingId, reason = '') => {\n    try {\n      const response = await fetchApi(`${API_BASE_URL}${ENDPOINTS.bookings}/${bookingId}/cancel`, {\n        method: 'POST',\n        body: JSON.stringify({\n          reason\n        })\n      });\n      return response;\n    } catch (error) {\n      console.error('Error cancelling booking:', error);\n      throw new Error(error.message || 'Failed to cancel booking');\n    }\n  },\n  /**\r\n   * Get booking history for a customer\r\n   * @param {string} email - Customer email\r\n   * @returns {Promise<Array>} List of bookings\r\n   */\n  getBookingHistory: async email => {\n    try {\n      const response = await fetchApi(`${API_BASE_URL}${ENDPOINTS.bookings}/history?email=${encodeURIComponent(email)}`);\n      return response;\n    } catch (error) {\n      console.error('Error fetching booking history:', error);\n      throw new Error(error.message || 'Failed to fetch booking history');\n    }\n  },\n  /**\r\n   * Update booking status\r\n   * @param {string} bookingId - ID of the booking\r\n   * @param {string} status - New status\r\n   * @returns {Promise<Object>} Updated booking data\r\n   */\n  updateBookingStatus: async (bookingId, status) => {\n    try {\n      const response = await fetchApi(`${API_BASE_URL}${ENDPOINTS.bookings}/${bookingId}/status`, {\n        method: 'PATCH',\n        body: JSON.stringify({\n          status\n        })\n      });\n      return response;\n    } catch (error) {\n      console.error('Error updating booking status:', error);\n      throw new Error(error.message || 'Failed to update booking status');\n    }\n  }\n};\nexport default bookingService;","map":{"version":3,"names":["fetchApi","config","API_BASE_URL","api","baseUrl","ENDPOINTS","endpoints","bookingService","createBooking","bookingData","response","bookings","method","body","JSON","stringify","error","console","Error","message","getBookingById","bookingId","updateContactInfo","contactInfo","createCheckoutSession","amount","lang","createCheckoutSessionWithHelper","sendBookingConfirmation","cancelBooking","reason","getBookingHistory","email","encodeURIComponent","updateBookingStatus","status"],"sources":["C:/Users/Runze Xia/Desktop/eremovals2/src/features/booking/services/bookingService.js"],"sourcesContent":["// src/features/booking/services/bookingService.js\r\nimport { fetchApi } from '../../../common/utils/apiUtils';\r\nimport config from '../../../config/config';\r\n\r\nconst API_BASE_URL = config.api.baseUrl;\r\nconst ENDPOINTS = config.api.endpoints;\r\n\r\n/**\r\n * Service for booking-related API operations\r\n */\r\nexport const bookingService = {\r\n    /**\r\n     * Create a new booking\r\n     * @param {Object} bookingData - Booking information\r\n     * @returns {Promise<Object>} Created booking data\r\n     */\r\n    createBooking: async (bookingData) => {\r\n        try {\r\n            const response = await fetchApi(`${API_BASE_URL}${ENDPOINTS.bookings}`, {\r\n                method: 'POST',\r\n                body: JSON.stringify(bookingData)\r\n            });\r\n            return response;\r\n        } catch (error) {\r\n            console.error('Error creating booking:', error);\r\n            throw new Error(error.message || 'Failed to create booking');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Get booking details by ID\r\n     * @param {string} bookingId - ID of the booking\r\n     * @returns {Promise<Object>} Booking details\r\n     */\r\n    getBookingById: async (bookingId) => {\r\n        try {\r\n            const response = await fetchApi(`${API_BASE_URL}${ENDPOINTS.bookings}/${bookingId}`);\r\n            return response;\r\n        } catch (error) {\r\n            console.error('Error fetching booking:', error);\r\n            throw new Error(error.message || 'Failed to fetch booking details');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Update contact information for a booking\r\n     * @param {string} bookingId - ID of the booking\r\n     * @param {Object} contactInfo - Contact information\r\n     * @returns {Promise<Object>} Updated booking data\r\n     */\r\n    updateContactInfo: async (bookingId, contactInfo) => {\r\n        try {\r\n            const response = await fetchApi(`${API_BASE_URL}${ENDPOINTS.bookings}/${bookingId}/contact`, {\r\n                method: 'POST',\r\n                body: JSON.stringify(contactInfo)\r\n            });\r\n            return response;\r\n        } catch (error) {\r\n            console.error('Error updating contact info:', error);\r\n            throw new Error(error.message || 'Failed to update contact information');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Create Stripe checkout session\r\n     * @param {string} bookingId - ID of the booking\r\n     * @param {number} amount - Payment amount\r\n     * @param {string} lang - Language for checkout page\r\n     * @returns {Promise<Object>} Checkout session data\r\n     */\r\n    createCheckoutSession: async (bookingId, amount, lang = 'en') => {\r\n        try {\r\n            const response = await fetchApi(\r\n                `${API_BASE_URL}${ENDPOINTS.bookings}/${bookingId}/create-checkout-session`,\r\n                {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ bookingId, amount, lang })\r\n                }\r\n            );\r\n            return response;\r\n        } catch (error) {\r\n            console.error('Error creating checkout session:', error);\r\n            throw new Error(error.message || 'Failed to create payment session');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Create Stripe checkout session with helper\r\n     * @param {string} bookingId - ID of the booking\r\n     * @param {number} amount - Payment amount including helper\r\n     * @param {string} lang - Language for checkout page\r\n     * @returns {Promise<Object>} Checkout session data\r\n     */\r\n    createCheckoutSessionWithHelper: async (bookingId, amount, lang = 'en') => {\r\n        try {\r\n            const response = await fetchApi(\r\n                `${API_BASE_URL}${ENDPOINTS.bookings}/${bookingId}/create-checkout-session-helper`,\r\n                {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ bookingId, amount, lang })\r\n                }\r\n            );\r\n            return response;\r\n        } catch (error) {\r\n            console.error('Error creating helper checkout session:', error);\r\n            throw new Error(error.message || 'Failed to create payment session with helper');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Send booking confirmation notification\r\n     * @param {string} bookingId - ID of the booking\r\n     * @returns {Promise<Object>} Response data\r\n     */\r\n    sendBookingConfirmation: async (bookingId) => {\r\n        try {\r\n            const response = await fetchApi(\r\n                `${API_BASE_URL}${ENDPOINTS.bookings}/${bookingId}/send`,\r\n                {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ bookingId })\r\n                }\r\n            );\r\n            return response;\r\n        } catch (error) {\r\n            console.error('Error sending booking confirmation:', error);\r\n            throw new Error(error.message || 'Failed to send booking confirmation');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Cancel a booking\r\n     * @param {string} bookingId - ID of the booking\r\n     * @param {string} reason - Cancellation reason\r\n     * @returns {Promise<Object>} Response data\r\n     */\r\n    cancelBooking: async (bookingId, reason = '') => {\r\n        try {\r\n            const response = await fetchApi(\r\n                `${API_BASE_URL}${ENDPOINTS.bookings}/${bookingId}/cancel`,\r\n                {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ reason })\r\n                }\r\n            );\r\n            return response;\r\n        } catch (error) {\r\n            console.error('Error cancelling booking:', error);\r\n            throw new Error(error.message || 'Failed to cancel booking');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Get booking history for a customer\r\n     * @param {string} email - Customer email\r\n     * @returns {Promise<Array>} List of bookings\r\n     */\r\n    getBookingHistory: async (email) => {\r\n        try {\r\n            const response = await fetchApi(\r\n                `${API_BASE_URL}${ENDPOINTS.bookings}/history?email=${encodeURIComponent(email)}`\r\n            );\r\n            return response;\r\n        } catch (error) {\r\n            console.error('Error fetching booking history:', error);\r\n            throw new Error(error.message || 'Failed to fetch booking history');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Update booking status\r\n     * @param {string} bookingId - ID of the booking\r\n     * @param {string} status - New status\r\n     * @returns {Promise<Object>} Updated booking data\r\n     */\r\n    updateBookingStatus: async (bookingId, status) => {\r\n        try {\r\n            const response = await fetchApi(\r\n                `${API_BASE_URL}${ENDPOINTS.bookings}/${bookingId}/status`,\r\n                {\r\n                    method: 'PATCH',\r\n                    body: JSON.stringify({ status })\r\n                }\r\n            );\r\n            return response;\r\n        } catch (error) {\r\n            console.error('Error updating booking status:', error);\r\n            throw new Error(error.message || 'Failed to update booking status');\r\n        }\r\n    }\r\n};\r\n\r\nexport default bookingService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}