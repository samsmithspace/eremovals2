{"ast":null,"code":"// src/common/utils/apiUtils.js\nimport config from '../../config/config';\n\n/**\n * Handle API response errors consistently\n * @param {Response} response - Fetch API response object\n * @returns {Promise} - Resolved response or throws an error with message\n */\nexport const handleApiResponse = async response => {\n  if (!response.ok) {\n    try {\n      const errorData = await response.json();\n      throw new Error(errorData.error || response.statusText);\n    } catch (err) {\n      // If parsing JSON fails, use status text\n      throw new Error(response.statusText || 'An unknown error occurred');\n    }\n  }\n  return response;\n};\n\n/**\n * Performs API requests with consistent error handling and headers\n * @param {string} endpoint - API endpoint path (without base URL)\n * @param {Object} options - Fetch options\n * @returns {Promise<any>} - Promise resolving to parsed JSON response\n */\nexport const fetchApi = async (endpoint, options = {}) => {\n  const url = `${config.apiUrl}${endpoint}`;\n  const headers = {\n    'Content-Type': 'application/json',\n    ...options.headers\n  };\n  const response = await fetch(url, {\n    ...options,\n    headers\n  });\n  await handleApiResponse(response);\n\n  // Only try to parse JSON if there's content\n  if (response.status !== 204) {\n    return response.json();\n  }\n  return null;\n};\n\n/**\n * Create a booking via the API\n * @param {Object} bookingData - Booking information\n * @returns {Promise<Object>} - Promise resolving to booking response\n */\nexport const createBooking = async bookingData => {\n  return fetchApi('/api/bookings', {\n    method: 'POST',\n    body: JSON.stringify(bookingData)\n  });\n};\n\n/**\n * Get booking details by ID\n * @param {string} bookingId - ID of the booking\n * @returns {Promise<Object>} - Promise resolving to booking details\n */\nexport const getBookingById = async bookingId => {\n  return fetchApi(`/api/bookings/${bookingId}`);\n};\n\n/**\n * Apply a promotion code to a booking\n * @param {string} bookingId - ID of the booking\n * @param {string} promoCode - Promotion code to apply\n * @returns {Promise<Object>} - Promise resolving to updated booking with discount\n */\nexport const applyPromoCode = async (bookingId, promoCode) => {\n  return fetchApi(`/api/promocode/${bookingId}/apply-promo`, {\n    method: 'POST',\n    body: JSON.stringify({\n      promoCode\n    })\n  });\n};","map":{"version":3,"names":["config","handleApiResponse","response","ok","errorData","json","Error","error","statusText","err","fetchApi","endpoint","options","url","apiUrl","headers","fetch","status","createBooking","bookingData","method","body","JSON","stringify","getBookingById","bookingId","applyPromoCode","promoCode"],"sources":["C:/Users/Runze Xia/Desktop/eremovals2/src/common/utils/apiUtils.js"],"sourcesContent":["// src/common/utils/apiUtils.js\nimport config from '../../config/config';\n\n/**\n * Handle API response errors consistently\n * @param {Response} response - Fetch API response object\n * @returns {Promise} - Resolved response or throws an error with message\n */\nexport const handleApiResponse = async (response) => {\n  if (!response.ok) {\n    try {\n      const errorData = await response.json();\n      throw new Error(errorData.error || response.statusText);\n    } catch (err) {\n      // If parsing JSON fails, use status text\n      throw new Error(response.statusText || 'An unknown error occurred');\n    }\n  }\n  return response;\n};\n\n/**\n * Performs API requests with consistent error handling and headers\n * @param {string} endpoint - API endpoint path (without base URL)\n * @param {Object} options - Fetch options\n * @returns {Promise<any>} - Promise resolving to parsed JSON response\n */\nexport const fetchApi = async (endpoint, options = {}) => {\n  const url = `${config.apiUrl}${endpoint}`;\n\n  const headers = {\n    'Content-Type': 'application/json',\n    ...options.headers\n  };\n\n  const response = await fetch(url, {\n    ...options,\n    headers\n  });\n\n  await handleApiResponse(response);\n\n  // Only try to parse JSON if there's content\n  if (response.status !== 204) {\n    return response.json();\n  }\n\n  return null;\n};\n\n/**\n * Create a booking via the API\n * @param {Object} bookingData - Booking information\n * @returns {Promise<Object>} - Promise resolving to booking response\n */\nexport const createBooking = async (bookingData) => {\n  return fetchApi('/api/bookings', {\n    method: 'POST',\n    body: JSON.stringify(bookingData)\n  });\n};\n\n/**\n * Get booking details by ID\n * @param {string} bookingId - ID of the booking\n * @returns {Promise<Object>} - Promise resolving to booking details\n */\nexport const getBookingById = async (bookingId) => {\n  return fetchApi(`/api/bookings/${bookingId}`);\n};\n\n/**\n * Apply a promotion code to a booking\n * @param {string} bookingId - ID of the booking\n * @param {string} promoCode - Promotion code to apply\n * @returns {Promise<Object>} - Promise resolving to updated booking with discount\n */\nexport const applyPromoCode = async (bookingId, promoCode) => {\n  return fetchApi(`/api/promocode/${bookingId}/apply-promo`, {\n    method: 'POST',\n    body: JSON.stringify({ promoCode })\n  });\n};"],"mappings":"AAAA;AACA,OAAOA,MAAM,MAAM,qBAAqB;;AAExC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,QAAQ,IAAK;EACnD,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IAChB,IAAI;MACF,MAAMC,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAIL,QAAQ,CAACM,UAAU,CAAC;IACzD,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ;MACA,MAAM,IAAIH,KAAK,CAACJ,QAAQ,CAACM,UAAU,IAAI,2BAA2B,CAAC;IACrE;EACF;EACA,OAAON,QAAQ;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,QAAQ,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACxD,MAAMC,GAAG,GAAG,GAAGb,MAAM,CAACc,MAAM,GAAGH,QAAQ,EAAE;EAEzC,MAAMI,OAAO,GAAG;IACd,cAAc,EAAE,kBAAkB;IAClC,GAAGH,OAAO,CAACG;EACb,CAAC;EAED,MAAMb,QAAQ,GAAG,MAAMc,KAAK,CAACH,GAAG,EAAE;IAChC,GAAGD,OAAO;IACVG;EACF,CAAC,CAAC;EAEF,MAAMd,iBAAiB,CAACC,QAAQ,CAAC;;EAEjC;EACA,IAAIA,QAAQ,CAACe,MAAM,KAAK,GAAG,EAAE;IAC3B,OAAOf,QAAQ,CAACG,IAAI,CAAC,CAAC;EACxB;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMa,aAAa,GAAG,MAAOC,WAAW,IAAK;EAClD,OAAOT,QAAQ,CAAC,eAAe,EAAE;IAC/BU,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,WAAW;EAClC,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,cAAc,GAAG,MAAOC,SAAS,IAAK;EACjD,OAAOf,QAAQ,CAAC,iBAAiBe,SAAS,EAAE,CAAC;AAC/C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOD,SAAS,EAAEE,SAAS,KAAK;EAC5D,OAAOjB,QAAQ,CAAC,kBAAkBe,SAAS,cAAc,EAAE;IACzDL,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEI;IAAU,CAAC;EACpC,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}