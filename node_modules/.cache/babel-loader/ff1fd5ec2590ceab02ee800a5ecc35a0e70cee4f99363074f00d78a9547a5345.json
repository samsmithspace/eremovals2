{"ast":null,"code":"// src/services/analytics.js\nimport config from '../config/config';\n\n/**\r\n * Analytics service for tracking user interactions and events\r\n * Provides a consistent interface for various analytics providers\r\n */\nclass AnalyticsService {\n  constructor() {\n    this.isInitialized = false;\n    this.providers = new Set();\n    this.eventQueue = [];\n    this.userProperties = {};\n  }\n\n  /**\r\n   * Initialize analytics service\r\n   * @param {Object} options - Configuration options\r\n   */\n  async initialize(options = {}) {\n    if (this.isInitialized) {\n      console.warn('Analytics service already initialized');\n      return;\n    }\n    try {\n      // Initialize Google Analytics if configured\n      if (options.googleAnalyticsId) {\n        await this.initializeGoogleAnalytics(options.googleAnalyticsId);\n      }\n\n      // Initialize other providers as needed\n      if (options.mixpanelToken) {\n        await this.initializeMixpanel(options.mixpanelToken);\n      }\n\n      // Process queued events\n      this.processEventQueue();\n      this.isInitialized = true;\n      console.log('Analytics service initialized');\n    } catch (error) {\n      console.error('Failed to initialize analytics:', error);\n    }\n  }\n\n  /**\r\n   * Track an event\r\n   * @param {string} eventName - Name of the event\r\n   * @param {Object} properties - Event properties\r\n   * @param {Object} options - Tracking options\r\n   */\n  track(eventName, properties = {}, options = {}) {\n    const event = {\n      name: eventName,\n      properties: {\n        ...properties,\n        timestamp: new Date().toISOString(),\n        url: window.location.href,\n        userAgent: navigator.userAgent,\n        ...this.userProperties\n      },\n      options\n    };\n    if (!this.isInitialized) {\n      this.eventQueue.push(event);\n      return;\n    }\n    this.sendEvent(event);\n  }\n\n  /**\r\n   * Track page view\r\n   * @param {string} pageName - Name of the page\r\n   * @param {Object} properties - Additional properties\r\n   */\n  trackPageView(pageName, properties = {}) {\n    this.track('page_view', {\n      page_name: pageName,\n      ...properties\n    });\n  }\n\n  /**\r\n   * Track user action\r\n   * @param {string} action - Action type\r\n   * @param {string} category - Action category\r\n   * @param {Object} properties - Additional properties\r\n   */\n  trackUserAction(action, category = 'user_interaction', properties = {}) {\n    this.track('user_action', {\n      action,\n      category,\n      ...properties\n    });\n  }\n\n  /**\r\n   * Track business events\r\n   * @param {string} eventType - Type of business event\r\n   * @param {Object} data - Event data\r\n   */\n  trackBusinessEvent(eventType, data = {}) {\n    const businessEvents = {\n      quote_requested: 'Quote Requested',\n      booking_created: 'Booking Created',\n      payment_initiated: 'Payment Initiated',\n      payment_completed: 'Payment Completed',\n      promo_code_applied: 'Promo Code Applied'\n    };\n    const eventName = businessEvents[eventType] || eventType;\n    this.track(eventName, {\n      event_type: eventType,\n      ...data\n    });\n  }\n\n  /**\r\n   * Set user properties\r\n   * @param {Object} properties - User properties to set\r\n   */\n  setUserProperties(properties) {\n    this.userProperties = {\n      ...this.userProperties,\n      ...properties\n    };\n\n    // Update user properties in analytics providers\n    this.providers.forEach(provider => {\n      if (provider.setUserProperties) {\n        provider.setUserProperties(properties);\n      }\n    });\n  }\n\n  /**\r\n   * Identify user\r\n   * @param {string} userId - User identifier\r\n   * @param {Object} traits - User traits\r\n   */\n  identify(userId, traits = {}) {\n    this.setUserProperties({\n      user_id: userId,\n      ...traits\n    });\n    this.track('user_identified', {\n      user_id: userId,\n      ...traits\n    });\n  }\n\n  /**\r\n   * Track error events\r\n   * @param {Error} error - Error object\r\n   * @param {Object} context - Additional context\r\n   */\n  trackError(error, context = {}) {\n    this.track('error_occurred', {\n      error_message: error.message,\n      error_stack: error.stack,\n      error_name: error.name,\n      ...context\n    });\n  }\n\n  /**\r\n   * Track performance metrics\r\n   * @param {string} metricName - Name of the metric\r\n   * @param {number} value - Metric value\r\n   * @param {Object} properties - Additional properties\r\n   */\n  trackPerformance(metricName, value, properties = {}) {\n    this.track('performance_metric', {\n      metric_name: metricName,\n      metric_value: value,\n      ...properties\n    });\n  }\n\n  /**\r\n   * Initialize Google Analytics\r\n   * @param {string} trackingId - GA tracking ID\r\n   */\n  async initializeGoogleAnalytics(trackingId) {\n    try {\n      // Load Google Analytics script\n      const script = document.createElement('script');\n      script.async = true;\n      script.src = `https://www.googletagmanager.com/gtag/js?id=${trackingId}`;\n      document.head.appendChild(script);\n\n      // Initialize gtag\n      window.dataLayer = window.dataLayer || [];\n      function gtag() {\n        window.dataLayer.push(arguments);\n      }\n      window.gtag = gtag;\n      gtag('js', new Date());\n      gtag('config', trackingId);\n      this.providers.add({\n        name: 'google_analytics',\n        track: event => {\n          gtag('event', event.name, event.properties);\n        }\n      });\n      console.log('Google Analytics initialized');\n    } catch (error) {\n      console.error('Failed to initialize Google Analytics:', error);\n    }\n  }\n\n  /**\r\n   * Initialize Mixpanel (example of another provider)\r\n   * @param {string} token - Mixpanel token\r\n   */\n  async initializeMixpanel(token) {\n    // Implementation would depend on Mixpanel SDK\n    console.log('Mixpanel initialization would go here');\n  }\n\n  /**\r\n   * Send event to all providers\r\n   * @param {Object} event - Event to send\r\n   */\n  sendEvent(event) {\n    this.providers.forEach(provider => {\n      try {\n        provider.track(event);\n      } catch (error) {\n        console.error(`Failed to track event with ${provider.name}:`, error);\n      }\n    });\n\n    // Log in development\n    if (config.isDevelopment) {\n      console.log('Analytics Event:', event);\n    }\n  }\n\n  /**\r\n   * Process queued events\r\n   */\n  processEventQueue() {\n    while (this.eventQueue.length > 0) {\n      const event = this.eventQueue.shift();\n      this.sendEvent(event);\n    }\n  }\n\n  /**\r\n   * Get current session information\r\n   * @returns {Object} Session information\r\n   */\n  getSessionInfo() {\n    return {\n      session_id: this.getSessionId(),\n      referrer: document.referrer,\n      landing_page: this.getLandingPage(),\n      session_start: this.getSessionStart()\n    };\n  }\n\n  /**\r\n   * Generate or get session ID\r\n   * @returns {string} Session ID\r\n   */\n  getSessionId() {\n    let sessionId = sessionStorage.getItem('analytics_session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      sessionStorage.setItem('analytics_session_id', sessionId);\n    }\n    return sessionId;\n  }\n\n  /**\r\n   * Get landing page from session\r\n   * @returns {string} Landing page URL\r\n   */\n  getLandingPage() {\n    let landingPage = sessionStorage.getItem('analytics_landing_page');\n    if (!landingPage) {\n      landingPage = window.location.href;\n      sessionStorage.setItem('analytics_landing_page', landingPage);\n    }\n    return landingPage;\n  }\n\n  /**\r\n   * Get session start time\r\n   * @returns {string} Session start timestamp\r\n   */\n  getSessionStart() {\n    let sessionStart = sessionStorage.getItem('analytics_session_start');\n    if (!sessionStart) {\n      sessionStart = new Date().toISOString();\n      sessionStorage.setItem('analytics_session_start', sessionStart);\n    }\n    return sessionStart;\n  }\n\n  /**\r\n   * Clean up analytics service\r\n   */\n  cleanup() {\n    this.eventQueue = [];\n    this.providers.clear();\n    this.isInitialized = false;\n  }\n}\n\n// Create and export singleton instance\nconst analyticsService = new AnalyticsService();\nexport default analyticsService;\n\n// Export the class for testing\nexport { AnalyticsService };","map":{"version":3,"names":["config","AnalyticsService","constructor","isInitialized","providers","Set","eventQueue","userProperties","initialize","options","console","warn","googleAnalyticsId","initializeGoogleAnalytics","mixpanelToken","initializeMixpanel","processEventQueue","log","error","track","eventName","properties","event","name","timestamp","Date","toISOString","url","window","location","href","userAgent","navigator","push","sendEvent","trackPageView","pageName","page_name","trackUserAction","action","category","trackBusinessEvent","eventType","data","businessEvents","quote_requested","booking_created","payment_initiated","payment_completed","promo_code_applied","event_type","setUserProperties","forEach","provider","identify","userId","traits","user_id","trackError","context","error_message","message","error_stack","stack","error_name","trackPerformance","metricName","value","metric_name","metric_value","trackingId","script","document","createElement","async","src","head","appendChild","dataLayer","gtag","arguments","add","token","isDevelopment","length","shift","getSessionInfo","session_id","getSessionId","referrer","landing_page","getLandingPage","session_start","getSessionStart","sessionId","sessionStorage","getItem","now","Math","random","toString","substr","setItem","landingPage","sessionStart","cleanup","clear","analyticsService"],"sources":["C:/Users/Runze Xia/Desktop/eremovals2/src/services/analytics.js"],"sourcesContent":["// src/services/analytics.js\r\nimport config from '../config/config';\r\n\r\n/**\r\n * Analytics service for tracking user interactions and events\r\n * Provides a consistent interface for various analytics providers\r\n */\r\nclass AnalyticsService {\r\n    constructor() {\r\n        this.isInitialized = false;\r\n        this.providers = new Set();\r\n        this.eventQueue = [];\r\n        this.userProperties = {};\r\n    }\r\n\r\n    /**\r\n     * Initialize analytics service\r\n     * @param {Object} options - Configuration options\r\n     */\r\n    async initialize(options = {}) {\r\n        if (this.isInitialized) {\r\n            console.warn('Analytics service already initialized');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Initialize Google Analytics if configured\r\n            if (options.googleAnalyticsId) {\r\n                await this.initializeGoogleAnalytics(options.googleAnalyticsId);\r\n            }\r\n\r\n            // Initialize other providers as needed\r\n            if (options.mixpanelToken) {\r\n                await this.initializeMixpanel(options.mixpanelToken);\r\n            }\r\n\r\n            // Process queued events\r\n            this.processEventQueue();\r\n\r\n            this.isInitialized = true;\r\n            console.log('Analytics service initialized');\r\n        } catch (error) {\r\n            console.error('Failed to initialize analytics:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Track an event\r\n     * @param {string} eventName - Name of the event\r\n     * @param {Object} properties - Event properties\r\n     * @param {Object} options - Tracking options\r\n     */\r\n    track(eventName, properties = {}, options = {}) {\r\n        const event = {\r\n            name: eventName,\r\n            properties: {\r\n                ...properties,\r\n                timestamp: new Date().toISOString(),\r\n                url: window.location.href,\r\n                userAgent: navigator.userAgent,\r\n                ...this.userProperties\r\n            },\r\n            options\r\n        };\r\n\r\n        if (!this.isInitialized) {\r\n            this.eventQueue.push(event);\r\n            return;\r\n        }\r\n\r\n        this.sendEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Track page view\r\n     * @param {string} pageName - Name of the page\r\n     * @param {Object} properties - Additional properties\r\n     */\r\n    trackPageView(pageName, properties = {}) {\r\n        this.track('page_view', {\r\n            page_name: pageName,\r\n            ...properties\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Track user action\r\n     * @param {string} action - Action type\r\n     * @param {string} category - Action category\r\n     * @param {Object} properties - Additional properties\r\n     */\r\n    trackUserAction(action, category = 'user_interaction', properties = {}) {\r\n        this.track('user_action', {\r\n            action,\r\n            category,\r\n            ...properties\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Track business events\r\n     * @param {string} eventType - Type of business event\r\n     * @param {Object} data - Event data\r\n     */\r\n    trackBusinessEvent(eventType, data = {}) {\r\n        const businessEvents = {\r\n            quote_requested: 'Quote Requested',\r\n            booking_created: 'Booking Created',\r\n            payment_initiated: 'Payment Initiated',\r\n            payment_completed: 'Payment Completed',\r\n            promo_code_applied: 'Promo Code Applied'\r\n        };\r\n\r\n        const eventName = businessEvents[eventType] || eventType;\r\n\r\n        this.track(eventName, {\r\n            event_type: eventType,\r\n            ...data\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set user properties\r\n     * @param {Object} properties - User properties to set\r\n     */\r\n    setUserProperties(properties) {\r\n        this.userProperties = {\r\n            ...this.userProperties,\r\n            ...properties\r\n        };\r\n\r\n        // Update user properties in analytics providers\r\n        this.providers.forEach(provider => {\r\n            if (provider.setUserProperties) {\r\n                provider.setUserProperties(properties);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Identify user\r\n     * @param {string} userId - User identifier\r\n     * @param {Object} traits - User traits\r\n     */\r\n    identify(userId, traits = {}) {\r\n        this.setUserProperties({\r\n            user_id: userId,\r\n            ...traits\r\n        });\r\n\r\n        this.track('user_identified', {\r\n            user_id: userId,\r\n            ...traits\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Track error events\r\n     * @param {Error} error - Error object\r\n     * @param {Object} context - Additional context\r\n     */\r\n    trackError(error, context = {}) {\r\n        this.track('error_occurred', {\r\n            error_message: error.message,\r\n            error_stack: error.stack,\r\n            error_name: error.name,\r\n            ...context\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Track performance metrics\r\n     * @param {string} metricName - Name of the metric\r\n     * @param {number} value - Metric value\r\n     * @param {Object} properties - Additional properties\r\n     */\r\n    trackPerformance(metricName, value, properties = {}) {\r\n        this.track('performance_metric', {\r\n            metric_name: metricName,\r\n            metric_value: value,\r\n            ...properties\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initialize Google Analytics\r\n     * @param {string} trackingId - GA tracking ID\r\n     */\r\n    async initializeGoogleAnalytics(trackingId) {\r\n        try {\r\n            // Load Google Analytics script\r\n            const script = document.createElement('script');\r\n            script.async = true;\r\n            script.src = `https://www.googletagmanager.com/gtag/js?id=${trackingId}`;\r\n            document.head.appendChild(script);\r\n\r\n            // Initialize gtag\r\n            window.dataLayer = window.dataLayer || [];\r\n            function gtag() { window.dataLayer.push(arguments); }\r\n            window.gtag = gtag;\r\n\r\n            gtag('js', new Date());\r\n            gtag('config', trackingId);\r\n\r\n            this.providers.add({\r\n                name: 'google_analytics',\r\n                track: (event) => {\r\n                    gtag('event', event.name, event.properties);\r\n                }\r\n            });\r\n\r\n            console.log('Google Analytics initialized');\r\n        } catch (error) {\r\n            console.error('Failed to initialize Google Analytics:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize Mixpanel (example of another provider)\r\n     * @param {string} token - Mixpanel token\r\n     */\r\n    async initializeMixpanel(token) {\r\n        // Implementation would depend on Mixpanel SDK\r\n        console.log('Mixpanel initialization would go here');\r\n    }\r\n\r\n    /**\r\n     * Send event to all providers\r\n     * @param {Object} event - Event to send\r\n     */\r\n    sendEvent(event) {\r\n        this.providers.forEach(provider => {\r\n            try {\r\n                provider.track(event);\r\n            } catch (error) {\r\n                console.error(`Failed to track event with ${provider.name}:`, error);\r\n            }\r\n        });\r\n\r\n        // Log in development\r\n        if (config.isDevelopment) {\r\n            console.log('Analytics Event:', event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Process queued events\r\n     */\r\n    processEventQueue() {\r\n        while (this.eventQueue.length > 0) {\r\n            const event = this.eventQueue.shift();\r\n            this.sendEvent(event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get current session information\r\n     * @returns {Object} Session information\r\n     */\r\n    getSessionInfo() {\r\n        return {\r\n            session_id: this.getSessionId(),\r\n            referrer: document.referrer,\r\n            landing_page: this.getLandingPage(),\r\n            session_start: this.getSessionStart()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Generate or get session ID\r\n     * @returns {string} Session ID\r\n     */\r\n    getSessionId() {\r\n        let sessionId = sessionStorage.getItem('analytics_session_id');\r\n        if (!sessionId) {\r\n            sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n            sessionStorage.setItem('analytics_session_id', sessionId);\r\n        }\r\n        return sessionId;\r\n    }\r\n\r\n    /**\r\n     * Get landing page from session\r\n     * @returns {string} Landing page URL\r\n     */\r\n    getLandingPage() {\r\n        let landingPage = sessionStorage.getItem('analytics_landing_page');\r\n        if (!landingPage) {\r\n            landingPage = window.location.href;\r\n            sessionStorage.setItem('analytics_landing_page', landingPage);\r\n        }\r\n        return landingPage;\r\n    }\r\n\r\n    /**\r\n     * Get session start time\r\n     * @returns {string} Session start timestamp\r\n     */\r\n    getSessionStart() {\r\n        let sessionStart = sessionStorage.getItem('analytics_session_start');\r\n        if (!sessionStart) {\r\n            sessionStart = new Date().toISOString();\r\n            sessionStorage.setItem('analytics_session_start', sessionStart);\r\n        }\r\n        return sessionStart;\r\n    }\r\n\r\n    /**\r\n     * Clean up analytics service\r\n     */\r\n    cleanup() {\r\n        this.eventQueue = [];\r\n        this.providers.clear();\r\n        this.isInitialized = false;\r\n    }\r\n}\r\n\r\n// Create and export singleton instance\r\nconst analyticsService = new AnalyticsService();\r\nexport default analyticsService;\r\n\r\n// Export the class for testing\r\nexport { AnalyticsService };\r\n"],"mappings":"AAAA;AACA,OAAOA,MAAM,MAAM,kBAAkB;;AAErC;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,aAAa,GAAG,KAAK;IAC1B,IAAI,CAACC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC1B,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,cAAc,GAAG,CAAC,CAAC;EAC5B;;EAEA;AACJ;AACA;AACA;EACI,MAAMC,UAAUA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC3B,IAAI,IAAI,CAACN,aAAa,EAAE;MACpBO,OAAO,CAACC,IAAI,CAAC,uCAAuC,CAAC;MACrD;IACJ;IAEA,IAAI;MACA;MACA,IAAIF,OAAO,CAACG,iBAAiB,EAAE;QAC3B,MAAM,IAAI,CAACC,yBAAyB,CAACJ,OAAO,CAACG,iBAAiB,CAAC;MACnE;;MAEA;MACA,IAAIH,OAAO,CAACK,aAAa,EAAE;QACvB,MAAM,IAAI,CAACC,kBAAkB,CAACN,OAAO,CAACK,aAAa,CAAC;MACxD;;MAEA;MACA,IAAI,CAACE,iBAAiB,CAAC,CAAC;MAExB,IAAI,CAACb,aAAa,GAAG,IAAI;MACzBO,OAAO,CAACO,GAAG,CAAC,+BAA+B,CAAC;IAChD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZR,OAAO,CAACQ,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAC3D;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIC,KAAKA,CAACC,SAAS,EAAEC,UAAU,GAAG,CAAC,CAAC,EAAEZ,OAAO,GAAG,CAAC,CAAC,EAAE;IAC5C,MAAMa,KAAK,GAAG;MACVC,IAAI,EAAEH,SAAS;MACfC,UAAU,EAAE;QACR,GAAGA,UAAU;QACbG,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCC,GAAG,EAAEC,MAAM,CAACC,QAAQ,CAACC,IAAI;QACzBC,SAAS,EAAEC,SAAS,CAACD,SAAS;QAC9B,GAAG,IAAI,CAACxB;MACZ,CAAC;MACDE;IACJ,CAAC;IAED,IAAI,CAAC,IAAI,CAACN,aAAa,EAAE;MACrB,IAAI,CAACG,UAAU,CAAC2B,IAAI,CAACX,KAAK,CAAC;MAC3B;IACJ;IAEA,IAAI,CAACY,SAAS,CAACZ,KAAK,CAAC;EACzB;;EAEA;AACJ;AACA;AACA;AACA;EACIa,aAAaA,CAACC,QAAQ,EAAEf,UAAU,GAAG,CAAC,CAAC,EAAE;IACrC,IAAI,CAACF,KAAK,CAAC,WAAW,EAAE;MACpBkB,SAAS,EAAED,QAAQ;MACnB,GAAGf;IACP,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIiB,eAAeA,CAACC,MAAM,EAAEC,QAAQ,GAAG,kBAAkB,EAAEnB,UAAU,GAAG,CAAC,CAAC,EAAE;IACpE,IAAI,CAACF,KAAK,CAAC,aAAa,EAAE;MACtBoB,MAAM;MACNC,QAAQ;MACR,GAAGnB;IACP,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;EACIoB,kBAAkBA,CAACC,SAAS,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;IACrC,MAAMC,cAAc,GAAG;MACnBC,eAAe,EAAE,iBAAiB;MAClCC,eAAe,EAAE,iBAAiB;MAClCC,iBAAiB,EAAE,mBAAmB;MACtCC,iBAAiB,EAAE,mBAAmB;MACtCC,kBAAkB,EAAE;IACxB,CAAC;IAED,MAAM7B,SAAS,GAAGwB,cAAc,CAACF,SAAS,CAAC,IAAIA,SAAS;IAExD,IAAI,CAACvB,KAAK,CAACC,SAAS,EAAE;MAClB8B,UAAU,EAAER,SAAS;MACrB,GAAGC;IACP,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;EACIQ,iBAAiBA,CAAC9B,UAAU,EAAE;IAC1B,IAAI,CAACd,cAAc,GAAG;MAClB,GAAG,IAAI,CAACA,cAAc;MACtB,GAAGc;IACP,CAAC;;IAED;IACA,IAAI,CAACjB,SAAS,CAACgD,OAAO,CAACC,QAAQ,IAAI;MAC/B,IAAIA,QAAQ,CAACF,iBAAiB,EAAE;QAC5BE,QAAQ,CAACF,iBAAiB,CAAC9B,UAAU,CAAC;MAC1C;IACJ,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;EACIiC,QAAQA,CAACC,MAAM,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;IAC1B,IAAI,CAACL,iBAAiB,CAAC;MACnBM,OAAO,EAAEF,MAAM;MACf,GAAGC;IACP,CAAC,CAAC;IAEF,IAAI,CAACrC,KAAK,CAAC,iBAAiB,EAAE;MAC1BsC,OAAO,EAAEF,MAAM;MACf,GAAGC;IACP,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;EACIE,UAAUA,CAACxC,KAAK,EAAEyC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC5B,IAAI,CAACxC,KAAK,CAAC,gBAAgB,EAAE;MACzByC,aAAa,EAAE1C,KAAK,CAAC2C,OAAO;MAC5BC,WAAW,EAAE5C,KAAK,CAAC6C,KAAK;MACxBC,UAAU,EAAE9C,KAAK,CAACK,IAAI;MACtB,GAAGoC;IACP,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIM,gBAAgBA,CAACC,UAAU,EAAEC,KAAK,EAAE9C,UAAU,GAAG,CAAC,CAAC,EAAE;IACjD,IAAI,CAACF,KAAK,CAAC,oBAAoB,EAAE;MAC7BiD,WAAW,EAAEF,UAAU;MACvBG,YAAY,EAAEF,KAAK;MACnB,GAAG9C;IACP,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;EACI,MAAMR,yBAAyBA,CAACyD,UAAU,EAAE;IACxC,IAAI;MACA;MACA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/CF,MAAM,CAACG,KAAK,GAAG,IAAI;MACnBH,MAAM,CAACI,GAAG,GAAG,+CAA+CL,UAAU,EAAE;MACxEE,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,MAAM,CAAC;;MAEjC;MACA3C,MAAM,CAACkD,SAAS,GAAGlD,MAAM,CAACkD,SAAS,IAAI,EAAE;MACzC,SAASC,IAAIA,CAAA,EAAG;QAAEnD,MAAM,CAACkD,SAAS,CAAC7C,IAAI,CAAC+C,SAAS,CAAC;MAAE;MACpDpD,MAAM,CAACmD,IAAI,GAAGA,IAAI;MAElBA,IAAI,CAAC,IAAI,EAAE,IAAItD,IAAI,CAAC,CAAC,CAAC;MACtBsD,IAAI,CAAC,QAAQ,EAAET,UAAU,CAAC;MAE1B,IAAI,CAAClE,SAAS,CAAC6E,GAAG,CAAC;QACf1D,IAAI,EAAE,kBAAkB;QACxBJ,KAAK,EAAGG,KAAK,IAAK;UACdyD,IAAI,CAAC,OAAO,EAAEzD,KAAK,CAACC,IAAI,EAAED,KAAK,CAACD,UAAU,CAAC;QAC/C;MACJ,CAAC,CAAC;MAEFX,OAAO,CAACO,GAAG,CAAC,8BAA8B,CAAC;IAC/C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZR,OAAO,CAACQ,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAClE;EACJ;;EAEA;AACJ;AACA;AACA;EACI,MAAMH,kBAAkBA,CAACmE,KAAK,EAAE;IAC5B;IACAxE,OAAO,CAACO,GAAG,CAAC,uCAAuC,CAAC;EACxD;;EAEA;AACJ;AACA;AACA;EACIiB,SAASA,CAACZ,KAAK,EAAE;IACb,IAAI,CAAClB,SAAS,CAACgD,OAAO,CAACC,QAAQ,IAAI;MAC/B,IAAI;QACAA,QAAQ,CAAClC,KAAK,CAACG,KAAK,CAAC;MACzB,CAAC,CAAC,OAAOJ,KAAK,EAAE;QACZR,OAAO,CAACQ,KAAK,CAAC,8BAA8BmC,QAAQ,CAAC9B,IAAI,GAAG,EAAEL,KAAK,CAAC;MACxE;IACJ,CAAC,CAAC;;IAEF;IACA,IAAIlB,MAAM,CAACmF,aAAa,EAAE;MACtBzE,OAAO,CAACO,GAAG,CAAC,kBAAkB,EAAEK,KAAK,CAAC;IAC1C;EACJ;;EAEA;AACJ;AACA;EACIN,iBAAiBA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACV,UAAU,CAAC8E,MAAM,GAAG,CAAC,EAAE;MAC/B,MAAM9D,KAAK,GAAG,IAAI,CAAChB,UAAU,CAAC+E,KAAK,CAAC,CAAC;MACrC,IAAI,CAACnD,SAAS,CAACZ,KAAK,CAAC;IACzB;EACJ;;EAEA;AACJ;AACA;AACA;EACIgE,cAAcA,CAAA,EAAG;IACb,OAAO;MACHC,UAAU,EAAE,IAAI,CAACC,YAAY,CAAC,CAAC;MAC/BC,QAAQ,EAAEjB,QAAQ,CAACiB,QAAQ;MAC3BC,YAAY,EAAE,IAAI,CAACC,cAAc,CAAC,CAAC;MACnCC,aAAa,EAAE,IAAI,CAACC,eAAe,CAAC;IACxC,CAAC;EACL;;EAEA;AACJ;AACA;AACA;EACIL,YAAYA,CAAA,EAAG;IACX,IAAIM,SAAS,GAAGC,cAAc,CAACC,OAAO,CAAC,sBAAsB,CAAC;IAC9D,IAAI,CAACF,SAAS,EAAE;MACZA,SAAS,GAAG,WAAWrE,IAAI,CAACwE,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;MAC9EN,cAAc,CAACO,OAAO,CAAC,sBAAsB,EAAER,SAAS,CAAC;IAC7D;IACA,OAAOA,SAAS;EACpB;;EAEA;AACJ;AACA;AACA;EACIH,cAAcA,CAAA,EAAG;IACb,IAAIY,WAAW,GAAGR,cAAc,CAACC,OAAO,CAAC,wBAAwB,CAAC;IAClE,IAAI,CAACO,WAAW,EAAE;MACdA,WAAW,GAAG3E,MAAM,CAACC,QAAQ,CAACC,IAAI;MAClCiE,cAAc,CAACO,OAAO,CAAC,wBAAwB,EAAEC,WAAW,CAAC;IACjE;IACA,OAAOA,WAAW;EACtB;;EAEA;AACJ;AACA;AACA;EACIV,eAAeA,CAAA,EAAG;IACd,IAAIW,YAAY,GAAGT,cAAc,CAACC,OAAO,CAAC,yBAAyB,CAAC;IACpE,IAAI,CAACQ,YAAY,EAAE;MACfA,YAAY,GAAG,IAAI/E,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACvCqE,cAAc,CAACO,OAAO,CAAC,yBAAyB,EAAEE,YAAY,CAAC;IACnE;IACA,OAAOA,YAAY;EACvB;;EAEA;AACJ;AACA;EACIC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACnG,UAAU,GAAG,EAAE;IACpB,IAAI,CAACF,SAAS,CAACsG,KAAK,CAAC,CAAC;IACtB,IAAI,CAACvG,aAAa,GAAG,KAAK;EAC9B;AACJ;;AAEA;AACA,MAAMwG,gBAAgB,GAAG,IAAI1G,gBAAgB,CAAC,CAAC;AAC/C,eAAe0G,gBAAgB;;AAE/B;AACA,SAAS1G,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}